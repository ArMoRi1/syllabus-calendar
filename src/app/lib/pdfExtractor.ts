// src/app/lib/pdfExtractor.ts

// –í–ê–ñ–õ–ò–í–û: –û–±—Ö—ñ–¥ –±–∞–≥—É pdf-parse –∑ —Ç–µ—Å—Ç–æ–≤–∏–º —Ñ–∞–π–ª–æ–º
async function extractWithPdfParse(buffer: Buffer): Promise<string> {
    try {
        console.log('üîÑ Using pdf-parse with workaround...')

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π —Ñ–∞–π–ª —â–æ–± –æ–±—ñ–π—Ç–∏ –±–∞–≥
        const fs = require('fs')
        const path = require('path')

        // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
        const testDir = path.join(process.cwd(), 'test', 'data')
        if (!fs.existsSync(testDir)) {
            fs.mkdirSync(testDir, { recursive: true })
        }

        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–µ–π–∫–æ–≤–∏–π —Ñ–∞–π–ª —è–∫–∏–π pdf-parse –æ—á—ñ–∫—É—î
        const testFile = path.join(testDir, '05-versions-space.pdf')
        if (!fs.existsSync(testFile)) {
            // –ó–∞–ø–∏—Å—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≤–∞–ª—ñ–¥–Ω–∏–π PDF
            const minimalPDF = Buffer.from('%PDF-1.4\n1 0 obj\n<</Type/Catalog/Pages 2 0 R>>\nendobj\n2 0 obj\n<</Type/Pages/Kids[3 0 R]/Count 1>>\nendobj\n3 0 obj\n<</Type/Page/Parent 2 0 R/Resources<</Font<</F1<</Type/Font/Subtype/Type1/BaseFont/Helvetica>>>>>>/MediaBox[0 0 612 792]/Contents 4 0 R>>\nendobj\n4 0 obj\n<</Length 44>>\nstream\nBT /F1 12 Tf 100 700 Td (Test) Tj ET\nendstream\nendobj\nxref\n0 5\n0000000000 65535 f\n0000000009 00000 n\n0000000058 00000 n\n0000000115 00000 n\n0000000274 00000 n\ntrailer\n<</Size 5/Root 1 0 R>>\nstartxref\n366\n%%EOF', 'latin1')
            fs.writeFileSync(testFile, minimalPDF)
            console.log('‚úÖ Created workaround file')
        }

        // –¢–µ–ø–µ—Ä —ñ–º–ø–æ—Ä—Ç—É—î–º–æ pdf-parse
        const pdfParse = require('pdf-parse')

        // –ü–∞—Ä—Å–∏–º–æ –Ω–∞—à —Ä–µ–∞–ª—å–Ω–∏–π PDF
        const data = await pdfParse(buffer)

        console.log(`‚úÖ pdf-parse successful!`)
        console.log(`üìÑ Pages: ${data.numpages}`)
        console.log(`üìè Text length: ${data.text.length}`)

        return data.text

    } catch (error) {
        console.error('‚ùå pdf-parse with workaround failed:', error)
        throw error
    }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –º–µ—Ç–æ–¥: –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –±—É—Ñ–µ—Ä–∞
function extractRawText(buffer: Buffer): string {
    console.log('üîÑ Extracting raw text from buffer...')

    const content = buffer.toString('binary')
    const textParts: string[] = []

    // –ú–µ—Ç–æ–¥ 1: –®—É–∫–∞—î–º–æ —Ç–µ–∫—Å—Ç –º—ñ–∂ BT —Ç–∞ ET (PDF text blocks)
    const btEtRegex = /BT([\s\S]*?)ET/g
    let match

    while ((match = btEtRegex.exec(content)) !== null) {
        const block = match[1]

        // –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ Tj –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ (–∑–≤–∏—á–∞–π–Ω–∏–π —Ç–µ–∫—Å—Ç)
        const tjRegex = /\(((?:[^\\()]|\\.)*)\)\s*Tj/g
        let tjMatch

        while ((tjMatch = tjRegex.exec(block)) !== null) {
            let text = tjMatch[1]

            // –î–µ–∫–æ–¥—É—î–º–æ escape sequences
            text = text
                .replace(/\\n/g, ' ')
                .replace(/\\r/g, ' ')
                .replace(/\\t/g, ' ')
                .replace(/\\\(/g, '(')
                .replace(/\\\)/g, ')')
                .replace(/\\\\/g, '\\')

            // –ß–∏—Å—Ç–∏–º–æ –≤—ñ–¥ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
            text = text.replace(/[\x00-\x1F\x7F-\xFF]/g, ' ')

            if (text.trim().length > 0) {
                textParts.push(text.trim())
            }
        }

        // –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ TJ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ñ–≤ (–º–∞—Å–∏–≤–∏ —Ç–µ–∫—Å—Ç—É)
        const tjArrayRegex = /\[(.*?)\]\s*TJ/g
        let tjArrayMatch

        while ((tjArrayMatch = tjArrayRegex.exec(block)) !== null) {
            const arrayContent = tjArrayMatch[1]

            // –í–∏—Ç—è–≥—É—î–º–æ –≤—Å—ñ —Ä—è–¥–∫–∏ –≤ –¥—É–∂–∫–∞—Ö
            const stringRegex = /\(((?:[^\\()]|\\.)*)\)/g
            let stringMatch

            while ((stringMatch = stringRegex.exec(arrayContent)) !== null) {
                let text = stringMatch[1]

                text = text
                    .replace(/\\n/g, ' ')
                    .replace(/\\r/g, ' ')
                    .replace(/\\t/g, ' ')
                    .replace(/\\\(/g, '(')
                    .replace(/\\\)/g, ')')
                    .replace(/\\\\/g, '\\')
                    .replace(/[\x00-\x1F\x7F-\xFF]/g, ' ')

                if (text.trim().length > 0) {
                    textParts.push(text.trim())
                }
            }
        }
    }

    // –ú–µ—Ç–æ–¥ 2: –ü–æ—à—É–∫ —Ç–µ–∫—Å—Ç—É –≤ stream –æ–±'—î–∫—Ç–∞—Ö
    const streamRegex = /stream([\s\S]*?)endstream/g

    while ((match = streamRegex.exec(content)) !== null) {
        const streamContent = match[1]

        // –û—á–∏—â–∞—î–º–æ —ñ —à—É–∫–∞—î–º–æ —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
        const cleanedStream = streamContent
            .replace(/[^\x20-\x7E\n\r\t]/g, ' ')  // –¢—ñ–ª—å–∫–∏ –¥—Ä—É–∫–æ–≤–∞–Ω—ñ ASCII
            .replace(/\s+/g, ' ')
            .trim()

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ç–µ–∫—Å—Ç (–º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Å–ª–æ–≤–∞)
        const words = cleanedStream.match(/[a-zA-Z]{3,}/g) || []

        if (words.length > 10 && cleanedStream.length > 50) {
            // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å—Ö–æ–∂–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç
            if (!/^[0-9\s\.\-\+]+$/.test(cleanedStream)) { // –ù–µ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–∞
                textParts.push(cleanedStream)
            }
        }
    }

    // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å–µ –∑–Ω–∞–π–¥–µ–Ω–µ
    let result = textParts.join(' ')

    // –§—ñ–Ω–∞–ª—å–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è
    result = result
        .replace(/\s+/g, ' ')           // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
        .replace(/([a-z])([A-Z])/g, '$1 $2')  // –†–æ–∑–¥—ñ–ª—è—î–º–æ CamelCase
        .trim()

    console.log(`üìè Raw extraction found: ${result.length} characters`)

    // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π, —Ä–æ–±–∏–º–æ –∞–≥—Ä–µ—Å–∏–≤–Ω—ñ—à–∏–π –ø–æ—à—É–∫
    if (result.length < 500) {
        console.log('‚ö†Ô∏è Text too short, trying aggressive search...')

        // –®—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
        const allText = content
            .replace(/[^\x20-\x7E\n\r\t]/g, ' ')
            .replace(/\s+/g, ' ')

        // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —á–∞—Å—Ç–∏–Ω–∏ —ñ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ
        const chunks = allText.split(/\s{2,}/)
        const validChunks = chunks.filter(chunk => {
            const words = chunk.match(/[a-zA-Z]{3,}/g) || []
            return words.length > 3 && chunk.length > 20
        })

        const aggressiveResult = validChunks.join(' ').substring(0, 100000)

        if (aggressiveResult.length > result.length) {
            result = aggressiveResult
            console.log(`üìè Aggressive search found: ${result.length} characters`)
        }
    }

    return result
}

// –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø
export async function extractTextFromPDF(buffer: Buffer): Promise<string> {
    console.log('üì± Starting PDF text extraction...')
    console.log(`üìä Buffer size: ${buffer.length} bytes (${(buffer.length / 1024 / 1024).toFixed(2)} MB)`)

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –±—É—Ñ–µ—Ä–∞
    if (!buffer || buffer.length === 0) {
        throw new Error('Empty PDF buffer')
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ PDF –ø—ñ–¥–ø–∏—Å—É
    const header = buffer.toString('ascii', 0, 8)
    console.log(`üîç PDF header: "${header}"`)

    if (!header.startsWith('%PDF')) {
        throw new Error('Invalid PDF file - not a PDF document')
    }

    let bestResult = ''
    const errors: string[] = []

    // –°–ø—Ä–æ–±—É—î–º–æ —Ä—ñ–∑–Ω—ñ –º–µ—Ç–æ–¥–∏
    const methods = [
        {
            name: 'pdf-parse-workaround',
            func: () => extractWithPdfParse(buffer)
        },
        {
            name: 'raw-text-extraction',
            func: () => extractRawText(buffer)
        }
    ]

    for (const method of methods) {
        try {
            console.log(`\nüéØ Trying method: ${method.name}`)

            const text = await method.func()

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            if (text && text.length > 50) {
                // –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç
                const cleaned = text
                    .replace(/\r\n/g, '\n')
                    .replace(/\n{3,}/g, '\n\n')
                    .replace(/\s+/g, ' ')
                    .trim()

                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–π–¥–æ–≤—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if (cleaned.length > bestResult.length) {
                    bestResult = cleaned

                    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —è–∫—ñ—Å—Ç—å —Ç–µ–∫—Å—Ç—É
                    const hasWords = (cleaned.match(/[a-zA-Z]{3,}/g) || []).length > 20
                    const hasDatePattern = /\d{4}|\d{1,2}\/\d{1,2}|January|February|March|April|May|June|July|August|September|October|November|December/i.test(cleaned)

                    // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –≤–∏–≥–ª—è–¥–∞—î –¥–æ–±—Ä–µ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ
                    if (cleaned.length > 200 && hasWords) {
                        console.log(`‚úÖ Successfully extracted ${cleaned.length} characters using ${method.name}`)
                        console.log(`üìù Preview: "${cleaned.substring(0, 300)}..."`)

                        if (!hasDatePattern) {
                            console.warn('‚ö†Ô∏è Warning: No dates found in text')
                        }

                        return cleaned
                    }
                }
            }

        } catch (error) {
            const msg = error instanceof Error ? error.message : String(error)
            console.error(`‚ùå Method ${method.name} failed: ${msg}`)
            errors.push(`${method.name}: ${msg}`)
        }
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞–π–∫—Ä–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–∫—â–æ —î
    if (bestResult.length > 100) {
        console.warn('‚ö†Ô∏è Partial extraction successful')
        console.warn('‚ö†Ô∏è Text quality may be poor. Consider copying text manually.')
        return bestResult
    }

    // –Ø–∫—â–æ –≤—Å—ñ –º–µ—Ç–æ–¥–∏ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∏
    throw new Error(
        `Could not extract readable text from PDF.\n` +
        `Tried methods: ${errors.join('; ')}\n` +
        `This PDF might be: 1) Scanned image (needs OCR), 2) Encrypted, 3) Using embedded fonts.\n` +
        `Please copy and paste the text manually into the text field.`
    )
}