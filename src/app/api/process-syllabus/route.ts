// src/app/api/process-syllabus/route.ts

import { NextRequest, NextResponse } from 'next/server';
import { extractTextFromPDF } from '../../lib/pdfExtractor';
import { analyzeTextWithOpenAI } from '../../lib/openaiAnalyzer';

// –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API
interface APIResponse {
    success: boolean;
    events?: any[];
    error?: string;
    debug?: {
        textLength: number;
        eventsFound: number;
        processingMethod?: string;
        fileSize?: number;
    };
    details?: string;
}

export async function POST(request: NextRequest): Promise<NextResponse> {
    console.log('=== üöÄ Starting syllabus processing ===');

    try {
        const formData = await request.formData();
        let textToAnalyze = '';
        let processingMethod = '';
        let fileSize = 0;

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ä—É—á–Ω–∏–π —Ç–µ–∫—Å—Ç
        const manualText = formData.get('manualText') as string;
        if (manualText?.trim() && manualText.length > 20) {
            textToAnalyze = manualText.trim();
            processingMethod = 'manual-input';
            console.log('‚úÖ Using manual text input');
            console.log(`üìè Manual text length: ${textToAnalyze.length} chars`);
        } else {
            // –û–±—Ä–æ–±–ª—è—î–º–æ PDF —Ñ–∞–π–ª
            const file = formData.get('file') as File;

            if (!file) {
                return NextResponse.json({
                    success: false,
                    error: '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ PDF —Ñ–∞–π–ª –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É'
                } as APIResponse);
            }

            fileSize = file.size;
            processingMethod = 'pdf-extraction';

            console.log(`üìÅ Processing file: ${file.name}`);
            console.log(`üìä File size: ${(fileSize / 1024 / 1024).toFixed(2)} MB`);
            console.log(`üìÑ File type: ${file.type}`);

            // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Ñ–∞–π–ª—É
            if (!file.name.toLowerCase().endsWith('.pdf')) {
                return NextResponse.json({
                    success: false,
                    error: '–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç—É PDF'
                } as APIResponse);
            }

            if (fileSize > 50 * 1024 * 1024) { // 50MB limit
                return NextResponse.json({
                    success: false,
                    error: '–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π (–±—ñ–ª—å—à–µ 50MB). –°–ø—Ä–æ–±—É–π—Ç–µ –º–µ–Ω—à–∏–π —Ñ–∞–π–ª.'
                } as APIResponse);
            }

            // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ File –≤ Buffer
            console.log('üîÑ Converting file to buffer...');
            const arrayBuffer = await file.arrayBuffer();
            const buffer = Buffer.from(arrayBuffer);

            // –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ PDF
            try {
                console.log('üîç Extracting text from PDF...');
                textToAnalyze = await extractTextFromPDF(buffer);

                if (!textToAnalyze || textToAnalyze.length < 50) {
                    throw new Error('PDF –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –æ–±—Ä–æ–±–∫–∏');
                }

                console.log(`‚úÖ PDF text extraction successful!`);
                console.log(`üìè Extracted text length: ${textToAnalyze.length} chars`);

            } catch (extractError) {
                console.error('‚ùå PDF extraction failed:', extractError);

                const errorMessage = extractError instanceof Error
                    ? extractError.message
                    : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É';

                return NextResponse.json({
                    success: false,
                    error: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ PDF: ${errorMessage}`,
                    details: '–°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç —Å–∏–ª–∞–±—É—Å—É –≤—Ä—É—á–Ω—É —É —Ç–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ.'
                } as APIResponse);
            }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ–≤–∂–∏–Ω—É —Ç–µ–∫—Å—Ç—É
        if (textToAnalyze.length < 50) {
            return NextResponse.json({
                success: false,
                error: `–¢–µ–∫—Å—Ç –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∏–π –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (${textToAnalyze.length} —Å–∏–º–≤–æ–ª—ñ–≤). –ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤.`
            } as APIResponse);
        }

        // –û–±—Ä—ñ–∑–∞—î–º–æ —Ç–µ–∫—Å—Ç —è–∫—â–æ –≤—ñ–Ω –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π –¥–ª—è OpenAI
        const MAX_TEXT_LENGTH = 100000; // 100k chars should be safe
        if (textToAnalyze.length > MAX_TEXT_LENGTH) {
            console.log(`‚ö†Ô∏è Text too long (${textToAnalyze.length}), truncating to ${MAX_TEXT_LENGTH}`);
            textToAnalyze = textToAnalyze.substring(0, MAX_TEXT_LENGTH);
        }

        console.log('ü§ñ Analyzing text with AI...');
        console.log(`üìù Text preview: "${textToAnalyze.substring(0, 150)}..."`);

        // –ê–Ω–∞–ª—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é OpenAI
        const events = await analyzeTextWithOpenAI(textToAnalyze);

        console.log(`‚úÖ AI analysis complete`);
        console.log(`üìÖ Raw events found: ${events.length}`);

        // –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ –æ—á–∏—â–∞—î–º–æ –ø–æ–¥—ñ—ó
        const validEvents = events
            .filter((event, index) => {
                const isValid = event.title && event.date && event.type;
                if (!isValid) {
                    console.log(`‚ö†Ô∏è Filtering invalid event at index ${index}:`, event);
                }
                return isValid;
            })
            .map((event, index) => ({
                id: index + 1,
                title: event.title.trim(),
                date: event.date.split('T')[0], // Ensure YYYY-MM-DD format
                type: event.type.toLowerCase(),
                description: event.description?.trim() || ''
            }))
            .filter(event => {
                // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏
                const dateObj = new Date(event.date);
                const isValidDate = !isNaN(dateObj.getTime());
                if (!isValidDate) {
                    console.log(`‚ö†Ô∏è Filtering event with invalid date: ${event.date}`);
                }
                return isValidDate;
            });

        console.log(`‚úÖ Processing complete!`);
        console.log(`üìä Valid events: ${validEvents.length}`);

        // –õ–æ–≥—É—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ –ø–æ–¥—ñ–π –¥–ª—è –¥–µ–±–∞–≥—É
        if (validEvents.length > 0) {
            console.log('üìÖ Sample events:');
            validEvents.slice(0, 3).forEach((event, i) => {
                console.log(`   ${i + 1}. ${event.date} - ${event.type} - ${event.title.substring(0, 50)}`);
            });
        }

        return NextResponse.json({
            success: true,
            events: validEvents,
            debug: {
                textLength: textToAnalyze.length,
                eventsFound: validEvents.length,
                processingMethod,
                fileSize
            }
        } as APIResponse);

    } catch (error) {
        console.error('üí• API Error:', error);

        const errorMessage = error instanceof Error ? error.message : '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞';

        return NextResponse.json({
            success: false,
            error: `–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: ${errorMessage}`,
            details: '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –≤—Ä—É—á–Ω—É.'
        } as APIResponse);
    }
}